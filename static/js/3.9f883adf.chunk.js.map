{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","assets/images/img3.jpeg","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","length","initialValues","formData","then","Post","item","postPhoto","message","likesCount","required","MyPosts","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.9f883adf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useState, useEffect, ChangeEvent} from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange}\n                       autoFocus={true}\n                       onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks\n","import React from \"react\"\nimport s from './ProfileInfo.module.css'\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\"\nimport {InjectedFormProps, reduxForm} from \"redux-form\"\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\nimport {ProfileType} from '../../../types/types'\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>save</button></div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                {/* todo: create some solution for embedded objects */}\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm\n","import React, {ChangeEvent, useState} from 'react'\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\nimport userPhoto from \"../../../assets/images/user.png\"\nimport ProfileDataForm from \"./ProfileDataForm\"\nimport {ContactsType, ProfileType} from '../../../types/types'\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false)\n            }\n        )\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt={'profilePhoto'}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {\n            Object\n                .keys(profile.contacts)\n                .map((key)  => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo\n","export default __webpack_public_path__ + \"static/media/img3.8e7ab55d.jpeg\";","import React from 'react'\nimport s from './Post.module.css'\nimport postPhoto from '../../../../assets/images/img3.jpeg'\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src={postPhoto} alt={''} />\n        { props.message }\n          <div>\n        <span>like</span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from \"redux-form\"\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls'\nimport {required} from '../../../../utils/validators/validators'\n\ntype PropsType = {\n\n}\n\nexport type AddPostFormValuesType = {\n    newPostText: string\n}\n\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)\n","import React from 'react'\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm'\nimport {PostType} from '../../../types/types'\n\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts)\nexport default MyPostsMemorized\n","import {actions} from \"../../../redux/profile-reducer\"\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\"\nimport {connect} from \"react-redux\"\nimport {AppStateType} from '../../../redux/redux-store'\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts)\n\nexport default MyPostsContainer\n","import React from 'react'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\"\nimport {ProfileType} from '../../types/types'\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile:React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    )\n}\n\nexport default Profile\n","import React from 'react'\nimport Profile from \"./Profile\"\nimport {connect} from \"react-redux\"\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\"\nimport {withRouter, RouteComponentProps} from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport {AppStateType} from '../../redux/redux-store'\nimport {ProfileType} from '../../types/types'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props)\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\")\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer)\n\n\n\n\n"],"sourceRoot":""}