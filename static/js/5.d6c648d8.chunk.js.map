{"version":3,"sources":["pages/chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","MessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflow","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","alt","userName","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"6LAcMA,EAAiB,WAEnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OARAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAGI,gCACS,UAAXN,GAAsB,wCACvB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAMND,EAAqB,WACvB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAEjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,IAAKC,SAAU,QAASC,SAf9B,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAE5C,qBAAKC,IAAK1B,EAAV,mBAIFuB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QACpE,OAAO,gCACH,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,QAASC,IAAK,WADnD,IAC+D,4BAAIR,EAAQS,WAC9E,uBACCT,EAAQA,QACT,6BAKF1B,EAA4B,WAE9B,MAA8BI,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBU,EAAhB,KACM9C,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OAAO,gCACH,0BAAU6C,SAAU,SAACvB,GAAD,OAAOsB,EAAWtB,EAAEE,cAAcsB,QAC5CA,MAAOZ,EADjB,eAEA,8BACI,cAAC,IAAD,CAAQa,SAAqB,UAAX/C,EAAoBgD,QAZnB,WAClBd,IAGLpC,EAASmD,YAAYf,IACrBU,EAAW,MAOP,wBAOGM,UA7FY,WACvB,OAAO,8BACH,cAACrD,EAAD","file":"static/js/5.d6c648d8.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\"\nimport {Button} from \"antd\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\n\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat/>\n    </div>\n}\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n\n    return <div>\n        {status === 'error' && <div>Error</div>}\n        <>\n            <Messages/>\n            <MessageForm/>\n        </>\n    </div>\n}\n\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    //auto scroll\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return <div style={{height: 400, overflow: \"auto\"}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\n\n        <div ref={messagesAnchorRef}> </div>\n    </div>\n}\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\n    return <div>\n        <img src={message.photo} style={{width: '40px'}} alt={'avatar'}/> <b>{message.userName}</b>\n        <br/>\n        {message.message}\n        <hr/>\n    </div>\n})\n\n\nconst MessageForm: React.FC<{}> = () => {\n    //дисэйблим кнопку до подключения вебсокета\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <textarea onChange={(e) => setMessage(e.currentTarget.value)}\n                  value={message}> </textarea>\n        <div>\n            <Button disabled={status !== 'ready'} onClick={sendMessageHandler}>\n                send\n            </Button>\n        </div>\n    </div>\n}\n\nexport default ChatPage"],"sourceRoot":""}