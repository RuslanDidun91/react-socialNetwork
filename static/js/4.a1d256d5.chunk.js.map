{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oGCiBnKC,EARyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCJnBC,EAJsB,SAACT,GAClC,OAAO,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,0BCDtCC,EAAcC,YAAiB,IAmBtBC,cAAoC,CAACC,KAAM,2BAA3CD,EAbT,SAACb,GACH,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,OAEhH,8BACI,kDCoBDC,EAvBsB,SAACpB,GAClC,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBN,GAAIwB,EAAExB,IAAZwB,EAAExB,OAC3EyB,EAAmBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAcmB,EAAE3B,OAMpF,OACI,sBAAKC,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAE0B,aAAlB,SACMP,IAEN,qBAAKpB,UAAWC,IAAEwB,SAAlB,SACI,8BAAOD,MAEX,cAAC,EAAD,CAAgBZ,SAZJ,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,uB,sCClB7BC,EAA6B,SAACb,GAAD,MAA0B,CACvDc,OAAQd,EAAMe,KAAKD,S,YCQRE,sBACXC,aAPkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBiB,ODA1B,SAA+BC,GAclC,OAJqCF,YACjCJ,EAA4B,GADKI,EARiC,SAACtC,GACnE,IAAKmC,EAAwBnC,EAAxBmC,OAAWM,EAAhB,YAA6BzC,EAA7B,GAEA,OAAKmC,EAEE,cAACK,EAAD,eAAsBC,IAFT,cAAC,IAAD,CAAUlC,GAAG,gBCN1B8B,CAGbjB","file":"static/js/4.a1d256d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react'\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\"\n\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    let path = \"/dialogs/\" + props.id\n\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n}\n\nexport default DialogItem\n","import React from 'react'\nimport s from './../Dialogs.module.css'\n\ntype PropsType = {\n    message: string\n}\nconst Message: React.FC<PropsType> = (props) => {\n    return <div className={s.dialog}>{props.message}</div>\n}\n\nexport default Message\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from \"redux-form\"\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls'\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\"\nimport {NewMessageFormValuesType} from '../Dialogs'\n\nconst maxLength50 = maxLengthCreator(50)\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\n    = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react'\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\"\nimport Message from \"./Message/Message\"\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\"\nimport {InitialStateType} from '../../redux/dialogs-reducer'\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  )\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> )\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsElements }\n            </div>\n            <div className={s.messages}>\n                <div>{ messagesElements }</div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\"\nimport {Redirect} from \"react-router-dom\"\nimport {connect} from \"react-redux\"\nimport {AppStateType} from '../redux/redux-store'\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n} as MapPropsType)\n\ntype MapPropsType = {\n    isAuth: boolean\n}\ntype DispatchPropsType = {\n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to='/login'/>\n\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n        mapStateToPropsForRedirect, {})\n    (RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}\n","import React from 'react'\nimport {actions} from '../../redux/dialogs-reducer'\nimport Dialogs from './Dialogs'\nimport {connect} from 'react-redux'\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport {compose} from 'redux'\nimport {AppStateType} from '../../redux/redux-store'\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}