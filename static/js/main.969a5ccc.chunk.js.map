{"version":3,"sources":["utils/validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","style","backgroundColor","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","closeHandler","notifySubscribersStatus","setTimeout","createChannel","messageHandler","e","newMessage","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","mewMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","styles","paginator","onClick","selectedPage","pageNumber","User","user","to","small","userPhoto","alt","disabled","some","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","values","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","followUser","bind","unfollowUser","UsersPage","pageTitle","LoginReduxForm","reduxForm","handleSubmit","createField","Input","undefined","formSummaryError","LoginPage","CaptchaIsRequired","selectIsAuth","selectCurrentLogin","AppHeader","icon","UserOutlined","Header","Layout","Sider","Content","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","collapsed","toggle","setState","catchAllUnhandledErrors","alert","this","initializeApp","trigger","collapsible","theme","mode","defaultSelectedKeys","Item","TeamOutlined","WechatOutlined","CustomerServiceOutlined","SettingOutlined","padding","span","createElement","MenuUnfoldOutlined","MenuFoldOutlined","margin","minHeight","exact","path","render","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"wHAEA,oEAAO,IAAMA,EAA+B,SAACC,GACzC,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,0CCTnB,MAA0B,sC,OCY1BE,IANW,WACtB,OAAO,qBAAMC,MAAQ,CAAEC,gBAAiB,SAAjC,SACH,qBAAKC,IAAKC,Q,oBCPlBC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,kC,ySCMxGC,EAAa,SACXC,GACP,OAAOC,IAASC,IAAiB,WAAaF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFjEN,EAAa,SAIZC,GACN,OAAOC,IAASC,IAAY,kBAAoBF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALnEN,EAAa,SAOTO,GACT,OAAOL,IAASM,IAAT,iBAAgD,CAACD,OAAQA,IAASH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SARpFN,EAAa,SAUZS,GACN,IAAMC,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASH,GAElBP,IAASM,IAAT,gBAA0EE,EAAU,CACvFG,QAAS,CACL,eAAgB,yBAErBT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAlBdN,EAAa,SAoBVc,GACR,OAAOZ,IAASM,IAAT,UAAyCM,GAASV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCvB7ES,EAAe,CACfC,MAAO,CACH,CAACC,GAAI,EAAGC,QAAS,mBAAoBC,WAAY,IACjD,CAACF,GAAI,EAAGC,QAAS,qBAAuBC,WAAY,IACpD,CAACF,GAAI,EAAGC,QAAS,SAAUC,WAAY,IACvC,CAACF,GAAI,EAAGC,QAAS,OAAQC,WAAY,KAEzCL,QAAS,KACTP,OAAQ,IAqCCa,EAAU,CACnBC,qBAAsB,SAACC,GAAD,MAA0B,CAACC,KAAM,sBAAuBD,gBAC9EE,eAAgB,SAACV,GAAD,MAA2B,CAACS,KAAM,8BAA+BT,YACjFW,UAAW,SAAClB,GAAD,MAAqB,CAACgB,KAAM,wBAAyBhB,WAChEmB,WAAY,SAACC,GAAD,MAAqB,CAACJ,KAAM,yBAA0BI,WAClEC,iBAAkB,SAACC,GAAD,MAAyB,CAACN,KAAM,gCAAiCM,YAG1EC,EAAiB,SAAC7B,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACtChC,EAAsBC,GADgB,OACnDK,EADmD,OAEzDyB,EAASX,EAAQI,eAAelB,IAFyB,2CAA/B,uDAKjB2B,EAAY,SAAChC,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACnChC,EAAqBC,GADc,OAChDK,EADgD,OAEpDyB,EAASX,EAAQK,UAAUnB,IAFyB,2CAA/B,uDAKZ4B,EAAe,SAAC3B,GAAD,8CAA+B,WAAOwB,GAAP,SAAAC,EAAA,+EAElChC,EAAwBO,GAFU,OAI3B,IAJ2B,OAI1C4B,YACLJ,EAASX,EAAQK,UAAUlB,IALoB,uGAA/B,uDAYf6B,EAAY,SAACC,GAAD,8CAA2B,WAAON,GAAP,eAAAC,EAAA,sEAC/BhC,EAAqBqC,GADU,OAGxB,KAFpB/B,EAD4C,QAGvC6B,YACLJ,EAASX,EAAQQ,iBAAiBtB,EAAKA,KAAKuB,SAJA,2CAA3B,uDAQZS,EAAc,SAACxB,GAAD,8CAAqC,WAAOiB,EAAUQ,GAAjB,iBAAAP,EAAA,6DACtD/B,EAASsC,IAAWC,KAAKvC,OAD6B,SAEzCD,EAAuBc,GAFkB,UAIpC,KAFlBR,EAFsD,QAInD6B,WAJmD,oBAK1C,MAAVlC,EALoD,gBAMpD8B,EAASD,EAAe7B,IAN4B,6BAQ9C,IAAIwC,MAAM,wBARoC,uCAWxDV,EAASW,YAAW,eAAgB,CAACC,OAAQrC,EAAKsC,SAAS,MAXH,kBAYjDC,QAAQC,OAAOxC,EAAKsC,SAAS,KAZoB,4CAArC,yDAgBZG,IAxFQ,WAAkE,IAAjEC,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCAEpF,OAAQA,EAAO1B,MACX,IAAK,sBACD,IAAI2B,EAAU,CACVjC,GAAI,EACJC,QAAS+B,EAAO3B,YAChBH,WAAY,GAEhB,OAAO,2BACA6B,GADP,IAEIhC,MAAM,GAAD,mBAAMgC,EAAMhC,OAAZ,CAAmBkC,MAGhC,IAAK,wBACD,OAAO,2BACAF,GADP,IAEIzC,OAAQ0C,EAAO1C,SAGvB,IAAK,8BACD,OAAO,2BAAIyC,GAAX,IAAkBlC,QAASmC,EAAOnC,UAGtC,IAAK,yBACD,OAAO,2BAAIkC,GAAX,IAAkBhC,MAAOgC,EAAMhC,MAAMmC,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,IAAMgC,EAAOtB,YAEpE,IAAK,gCACD,OAAO,2BAAIqB,GAAX,IAAkBlC,QAAQ,2BAAKkC,EAAMlC,SAAZ,IAAqBe,OAAQoB,EAAOpB,WACjE,QACI,OAAOmB,K,sFCnCfjC,EAAe,CACfsC,QAAS,CACL,CAACpC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,SACd,CAACrC,GAAI,EAAGqC,KAAM,SACd,CAACrC,GAAI,EAAGqC,KAAM,UACd,CAACrC,GAAI,EAAGqC,KAAM,WAElBV,SAAU,CACN,CAAC3B,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,6BACjB,CAACD,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,MACjB,CAACD,GAAI,EAAGC,QAAS,QAiBZE,EAAU,CACnBmC,YAAa,SAACC,GAAD,MAA6B,CAACjC,KAAM,0BAA2BiC,oBAGjEC,IAjBQ,WAAkE,IAAjET,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACpF,OAAQA,EAAO1B,MACX,IAAK,0BACD,IAAImC,EAAOT,EAAOO,eAClB,OAAO,2BACAR,GADP,IAEIJ,SAAS,GAAD,mBAAMI,EAAMJ,UAAZ,CAAsB,CAAC3B,GAAI,EAAGC,QAASwC,OAEvD,QACI,OAAOV,K,iCCtCJ,QAA0B,kC,mLCCnCW,EAAc,CAChB,oBAAqB,GACrB,iBAAkB,IAGlBC,EAAuB,KAGrBC,EAAe,WACjBC,EAAwB,WACxBC,WAAWC,EAAe,MAGxBC,EAAiB,SAACC,GACpB,IAAMC,EAAaC,KAAKC,MAAMH,EAAE5D,MAChCqD,EAAY,qBAAqBW,SAAQ,SAAAC,GAAC,OAAIA,EAAEJ,OAG9CK,EAAc,WAChBV,EAAwB,UAEtBW,EAAe,WACjBX,EAAwB,SACxBY,QAAQC,MAAM,iBAGZC,EAAU,WAAO,IAAD,QAChB,QAAF,EAAAhB,SAAA,SAAIiB,oBAAoB,QAAShB,GAC/B,QAAF,EAAAD,SAAA,SAAIiB,oBAAoB,UAAWZ,GACjC,QAAF,EAAAL,SAAA,SAAIiB,oBAAoB,OAAQL,GAC9B,QAAF,EAAAZ,SAAA,SAAIiB,oBAAoB,QAASJ,IAG/BX,EAA0B,SAACvD,GAC7BoD,EAAY,kBAAkBW,SAAQ,SAAAC,GAAC,OAAIA,EAAEhE,OAGjD,SAASyD,IAAiB,IAAD,EACrBY,IACE,QAAF,EAAAhB,SAAA,SAAIkB,QACJlB,EAAK,IAAImB,UAAU,gEACnBjB,EAAwB,WACxBF,EAAGoB,iBAAiB,QAASnB,GAC7BD,EAAGoB,iBAAiB,UAAWf,GAC/BL,EAAGoB,iBAAiB,OAAQR,GAC5BZ,EAAGoB,iBAAiB,QAASP,GAG1B,IAAMQ,EAAU,WAEfjB,KAFKiB,EAAU,WAIX,IAAD,EACHtB,EAAY,qBAAuB,GACnCA,EAAY,kBAAoB,GAChCiB,IACE,QAAF,EAAAhB,SAAA,SAAIkB,SARCG,EAAU,SAUTC,EAA4BC,GAGlC,OADAxB,EAAYuB,GAAWE,KAAKD,GACrB,WAEHxB,EAAYuB,GAAavB,EAAYuB,GAAW/B,QAAO,SAAAoB,GAAC,OAAIA,IAAMY,OAfjEF,EAAU,SAkBPC,EAA4BC,GAEpCxB,EAAYuB,GAAavB,EAAYuB,GAAW/B,QAAO,SAAAoB,GAAC,OAAIA,IAAMY,MApB7DF,EAAU,SAsBP/D,GAAkB,IAAD,EACvB,QAAF,EAAA0C,SAAA,SAAIyB,KAAKnE,I,SChEbH,EAAe,CACf6B,SAAU,GACVrC,OAAQ,WAsBCa,EACS,SAACwB,GAAD,MAAqC,CACnDrB,KAAM,4BAA6B+D,QAAS,CAAC1C,cAFxCxB,EAIM,SAACb,GAAD,MAAyB,CACpCgB,KAAM,yBAA0B+D,QAAS,CAAC/E,YAK9CgF,EAAwE,KACtEC,EAA2B,SAACzD,GAM9B,OAL2B,OAAvBwD,IACAA,EAAqB,SAAC3C,GAClBb,EAASX,EAAyBwB,MAGnC2C,GAGPE,EAA+D,KAC7DC,EAA8B,SAAC3D,GAMjC,OAL8B,OAA1B0D,IACAA,EAAwB,SAAClF,GACrBwB,EAASX,EAAsBb,MAGhCkF,GAIEE,EAAyB,yDAAiB,WAAO5D,GAAP,SAAAC,EAAA,sDACnDiD,IACAA,EAAkB,oBAAqBO,EAAyBzD,IAChEkD,EAAkB,iBAAkBS,EAA4B3D,IAHb,2CAAjB,uDAMzB6D,EAAwB,yDAAiB,WAAO7D,GAAP,SAAAC,EAAA,sDAClDiD,EAAoB,oBAAoBO,EAAyBzD,IACjEkD,EAAoB,iBAAkBS,EAA4B3D,IAClEkD,IAHkD,2CAAjB,uDAMxB1B,EAAc,SAACrC,GAAD,8CAAgC,WAAOa,GAAP,SAAAC,EAAA,sDACvDiD,EAAoB/D,GADmC,2CAAhC,uDAIZ2E,IAlEK,WAAkE,IAAjE7C,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACjF,OAAQA,EAAO1B,MACX,IAAK,4BACD,OAAO,2BACAyB,GADP,IAEIJ,SAAU,sBAAII,EAAMJ,UAAV,YAAuBK,EAAOqC,QAAQ1C,SAASkD,KAAI,SAAAC,GAAC,kCAASA,GAAT,IAAY9E,GAAI+E,qBACzE7C,QAAO,SAAC4C,EAAEE,EAAMC,GAAT,OAAmBD,GAASC,EAAM1G,OAAS,SAE/D,IAAK,yBACD,OAAO,2BACAwD,GADP,IAEIzC,OAAQ0C,EAAOqC,QAAQ/E,SAG/B,QACI,OAAOyC,K,oBC3BnBlD,EAAOC,QAAU,CAAC,UAAY,2B,gCCD9B,0GAWYoG,EAKAC,EAhBZ,SAGalG,EAHb,OAGwBmG,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACT3F,QAAa,CACT,UAAW,2C,SAIPsF,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,0FCJQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kLCPOC,EAAU,WAEf,OAAO5G,IAASC,IAAT,WAA6DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF/EwG,EAAU,SAIbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOhH,IAASiH,KAAT,aAAgH,CAACJ,QAAOC,WAAUC,aAAYC,YAChJ9G,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANhBwG,EAAU,WASf,OAAO5G,IAASkH,OAAT,eCdFC,EAAc,WAEnB,OAAOnH,IAASC,IAAT,4BAAoEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCD/FS,EAAe,CACfd,OAAQ,KACR8G,MAAO,KACPO,MAAO,KACPC,QAAQ,EACRC,WAAY,MAgBHpG,EACQ,SAACnB,EAAuB8G,EAAsBO,EAAsBC,GAApE,MAAyF,CACtGhG,KAAM,wBAAyB+D,QAAS,CAACrF,SAAQ8G,QAAOO,QAAOC,YAF1DnG,EAIa,SAACoG,GAAD,MAAyB,CAC3CjG,KAAM,kCAAmC+D,QAAS,CAACkC,gBAI9CC,EAAkB,yDAAiB,WAAO1F,GAAP,uBAAAC,EAAA,sEACzB8E,IADyB,QACxCY,EADwC,QAEjCvF,aAAegE,IAAgBwB,UAAU,EACvBD,EAAOpH,KAA3BW,EAD0C,EAC1CA,GAAIqG,EADsC,EACtCA,MAAOP,EAD+B,EAC/BA,MAChBhF,EAASX,EAAwBH,EAAI8F,EAAOO,GAAO,KAJX,2CAAjB,uDAuBlBM,EAAgB,yDAAiB,WAAO7F,GAAP,iBAAAC,EAAA,sEACvBqF,IADuB,OACpC/G,EADoC,OAEpCkH,EAAalH,EAAKuH,IACxB9F,EAASX,EAA6BoG,IAHI,2CAAjB,uDAcdM,EA3DK,WAAkE,IAAjE9E,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCACjF,OAAQA,EAAO1B,MACX,IAAK,wBACL,IAAK,kCACD,OAAO,2BACAyB,GACAC,EAAOqC,SAElB,QACI,OAAOtC,ICrBfjC,EAAe,CACfgH,aAAa,GAkBJ3G,EACW,iBAAO,CAACG,KAAM,+BAavByG,EA1BI,WAAkE,IAAjEhF,EAAgE,uDAAxDjC,EAAckC,EAA0C,uCAChF,OAAQA,EAAO1B,MACX,IAAK,6BACD,OAAO,2BACAyB,GADP,IAEI+E,aAAa,IAErB,QACI,OAAO/E,I,2BClBfjC,EAAe,GAMJkH,EAJQ,WAAwC,IAAvCjF,EAAsC,uDAA9BjC,EAC5B,OAAOiC,G,QCFEkF,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC3E,OAAOH,EAAMrC,KAAI,SAACyC,GACd,OAAIA,EAAEF,KAAiBD,EACZ,2BAAIG,GAAMD,GAEdC,MCHFC,EAAW,CACpBC,SADoB,WACwE,IAAnFC,EAAkF,uDAApE,EAAGC,EAAiE,uDAAtD,GAAIC,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KACjF,OAAO3I,IAASC,IAAkB,qBAAcuI,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAqB,OAAXC,EAAkB,GAAlB,kBAAkCA,KAC7HzI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEzBwI,OALoB,SAKb7I,GACH,OAAOC,IAASiH,KAAT,iBAAyClH,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAE9EyI,SARoB,SAQX9I,GACL,OAAOC,IAASkH,OAAT,iBAA0BnH,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UCL/DS,EAAe,CACfiI,MAAO,GACPL,SAAU,GACVM,gBAAiB,EACjBP,YAAa,EACbQ,YAAY,EACZC,oBAAqB,GACrBhG,OAAQ,CACJyF,KAAM,GACNC,OAAQ,OA4CHzH,EACM,SAACnB,GAAD,MAAqB,CAACsB,KAAM,kBAAmBtB,WADrDmB,EAEQ,SAACnB,GAAD,MAAqB,CAACsB,KAAM,oBAAqBtB,WAFzDmB,EAGC,SAAC4H,GAAD,MAA6B,CAACzH,KAAM,qBAAsByH,UAH3D5H,EAIO,SAACsH,GAAD,MAA0B,CAACnH,KAAM,4BAA6BmH,gBAJrEtH,EAKE,SAAC+B,GAAD,MAAyB,CAAC5B,KAAM,sBAAuB+D,QAASnC,IALlE/B,EAMW,SAAC6H,GAAD,MAA8B,CAC9C1H,KAAM,iCACN6H,MAAOH,IARF7H,EAUS,SAAC8H,GAAD,MAA0B,CACxC3H,KAAM,8BACN2H,eAZK9H,EAcgB,SAAC8H,EAAqBjJ,GAAtB,MAA0C,CAC/DsB,KAAM,wCACN2H,aACAjJ,WAIKoJ,EAAe,SAACC,EACAX,EAAkBxF,GAC3C,8CAAO,WAAOpB,EAAUQ,GAAjB,eAAAP,EAAA,6DACHD,EAASX,GAAyB,IAClCW,EAASX,EAAuBkI,IAChCvH,EAASX,EAAkB+B,IAHxB,SAKcqF,EAASC,SAASa,EAAMX,EAAUxF,EAAOyF,KAAKzF,EAAO0F,QALnE,OAKCvI,EALD,OAMHyB,EAASX,GAAyB,IAClCW,EAASX,EAAiBd,EAAK6H,QAC/BpG,EAASX,EAA2Bd,EAAKiJ,aARtC,2CAAP,yDAYEC,EAAmB,uCAAG,WAAOzH,EACA9B,EACAwJ,EACAC,GAHP,SAAA1H,EAAA,6DAIxBD,EAASX,GAAgC,EAAMnB,IAJvB,SAKHwJ,EAAUxJ,GALP,OAOI,IAPJ,OAOXkC,YACTJ,EAAS2H,EAAczJ,IAE3B8B,EAASX,GAAgC,EAAOnB,IAVxB,2CAAH,4DAyBV0J,EApGM,WAA+D,IAA9D3G,EAA6D,uDAArDjC,EAAckC,EAAuC,uCAC/E,OAAQA,EAAO1B,MACX,IAAK,kBACD,OAAO,2BACAyB,GADP,IAEIgG,MAAOd,EAAoBlF,EAAMgG,MAAO/F,EAAOhD,OAAQ,KAAM,CAAC2J,UAAU,MAEhF,IAAK,oBACD,OAAO,2BACA5G,GADP,IAEIgG,MAAOd,EAAoBlF,EAAMgG,MAAO/F,EAAOhD,OAAQ,KAAM,CAAC2J,UAAU,MAEhF,IAAK,qBACD,OAAO,2BAAI5G,GAAX,IAAkBgG,MAAO/F,EAAO+F,QAEpC,IAAK,4BACD,OAAO,2BAAIhG,GAAX,IAAkB0F,YAAazF,EAAOyF,cAE1C,IAAK,iCACD,OAAO,2BAAI1F,GAAX,IAAkBiG,gBAAiBhG,EAAOmG,QAE9C,IAAK,8BACD,OAAO,2BAAIpG,GAAX,IAAkBkG,WAAYjG,EAAOiG,aAEzC,IAAK,sBACD,OAAO,2BAAIlG,GAAX,IAAkBG,OAAQF,EAAOqC,UAErC,IAAK,wCACD,OAAO,2BACAtC,GADP,IAEImG,oBAAqBlG,EAAOiG,WAAP,sBACXlG,EAAMmG,qBADK,CACgBlG,EAAOhD,SACtC+C,EAAMmG,oBAAoBhG,QAAO,SAAAlC,GAAE,OAAIA,IAAOgC,EAAOhD,YAGnE,QACI,OAAO+C,I,8BC7Cf6G,GAAcC,YAAgB,CAC9BC,YAAahH,IACbiH,YAAavG,IACbwG,QAAShC,EACTiC,UAAWP,EACXnH,KAAMsF,EACNqC,KAAMC,KACNC,IAAKrC,EACLsC,KAAMzE,OAYJ0E,GAAmB7D,OAAO8D,sCAAwCC,IAElEC,GAAQC,YAAYd,GAAaU,GAAiBK,YAAgBC,QAExEnE,OAAOoE,UAAYJ,GAEJA,U,QCnCR,SAASK,GAAkBC,GAC9B,OAAO,SAACC,GACJ,OAAO,eAAC,IAAMC,SAAP,CAAgBC,SAAU,8CAA1B,SACH,eAACH,EAAD,eAAsBC,O,gECoDnBG,GA7CsB,SAAC,GAUlC,IALyC,IAJHC,EAIE,EAJFA,gBAAiB1C,EAIf,EAJeA,SAIf,IAHFD,mBAGE,MAHY,EAGZ,MAFF4C,qBAEE,MAFc,SAAAC,GAAC,OAAIA,GAEnB,MADFC,mBACE,MADY,GACZ,EAEpCC,EAAaC,KAAKC,KAAKN,EAAkB1C,GAEzCiD,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAMxG,KAAKyG,GAGf,IAAIC,EAAeJ,KAAKC,KAAKF,EAAaD,GAC1C,EAAwCO,mBAAS,GAAjD,oBAAKC,EAAL,KAAoBC,EAApB,KAEIC,GAAyBF,EAAgB,GAAKR,EAAc,EAC5DW,EAAyBH,EAAgBR,EAG7C,OAAO,uBAAKY,UAAWC,KAAGC,KAAOC,WAA1B,UACFP,EAAgB,GACjB,yBAAQQ,QAAS,WACbP,EAAiBD,EAAgB,IADrC,kBAICJ,EACIzI,QAAO,SAAAC,GAAC,OAAIA,GAAK8I,GAAyB9I,GAAK+I,KAC/CrG,KAAI,SAAC1C,GACF,OAAO,uBAAMgJ,UAAWC,KAAG,gBACtBC,KAAOG,aAAe/D,IAAgBtF,GACxCkJ,KAAOI,YAEGF,QAAS,SAACtI,GACNoH,EAAclI,IALxB,SAMUA,GAHCA,MAKzB0I,EAAeE,GAChB,yBAAQQ,QAAS,WACbP,EAAiBD,EAAgB,IADrC,sB,+BCEOW,GAxCmB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMzD,EAA2C,EAA3CA,oBAAqBJ,EAAsB,EAAtBA,SAAUD,EAAY,EAAZA,OAGrE,OACI,iCACQ,kCACI,+BACG,eAAC,IAAD,CAAS+D,GAAI,YAAcD,EAAK3L,GAAhC,SACC,sBAAKrB,IAA0B,MAArBgN,EAAK/K,OAAOiL,MAAgBF,EAAK/K,OAAOiL,MAAQC,KAAWC,IAAK,GACrEZ,UAAWE,KAAOS,gBAG3B,+BACKH,EAAKhD,SACA,yBAAQqD,SAAU9D,EACf+D,MAAK,SAAAjM,GAAE,OAAIA,IAAO2L,EAAK3L,MAClBuL,QAAS,WACLzD,EAAS6D,EAAK3L,KAH1B,sBAMA,yBAAQgM,SAAU9D,EAAoB+D,MAAK,SAAAjM,GAAE,OAAIA,IAAO2L,EAAK3L,MACrDuL,QAAS,WACL1D,EAAO8D,EAAK3L,KAFxB,yBAOlB,kCACQ,kCACI,+BAAM2L,EAAKtJ,OACX,+BAAMsJ,EAAKrM,YAEf,kCACI,+BAAM,0BACN,+BAAM,iC,mBCxCjBkI,GAAW0E,cAJC,SAACnK,GACtB,OAAOA,EAAMkH,UAAUlB,SAIvB,SAACA,GACG,OAAOA,EAAM7F,QAAO,SAAAoF,GAAC,OAAI,QAGpB6E,GAAc,SAACpK,GACxB,OAAOA,EAAMkH,UAAUvB,UAGd0E,GAAqB,SAACrK,GAC/B,OAAOA,EAAMkH,UAAUjB,iBAGdqE,GAAiB,SAACtK,GAC3B,OAAOA,EAAMkH,UAAUxB,aAGd6E,GAAgB,SAACvK,GAC1B,OAAOA,EAAMkH,UAAUhB,YAGdsE,GAAyB,SAACxK,GACnC,OAAOA,EAAMkH,UAAUf,qBAGdsE,GAAiB,SAACzK,GAC3B,OAAOA,EAAMkH,UAAU/G,QC3BrBuK,GAA0B,WAC5B,MAAO,IAaEC,GAAuCC,IAAMC,MAAK,SAAC5C,GAE5D,IAAM9H,EAAS2K,YAAYL,IAY3B,OAAO,+BACH,eAAC,KAAD,CACIM,oBAAkB,EAClBC,cAAe,CAACpF,KAAKzF,EAAOyF,KAAMC,OAAQoF,OAAO9K,EAAO0F,SACxDqF,SAAUR,GACVS,SAfO,SAACC,EAAD,GAA4F,IAAxEC,EAAuE,EAAvEA,cACzBlL,EAAqB,CACvByF,KAAMwF,EAAOxF,KACbC,OAA0B,SAAlBuF,EAAOvF,OAAoB,KAAyB,SAAlBuF,EAAOvF,QAGrDoC,EAAMqD,gBAAgBnL,GACtBkL,GAAc,IAId,SAMK,gBAAEE,EAAF,EAAEA,aAAF,OACG,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOhN,KAAK,OAAO+B,KAAK,SACxB,gBAAC,KAAD,CAAOA,KAAK,SAASkL,GAAG,SAAxB,UACI,yBAAQnP,MAAM,OAAd,iBACA,yBAAQA,MAAM,OAAd,2BACA,yBAAQA,MAAM,QAAd,gCAEJ,yBAAQkC,KAAK,SAAS0L,SAAUsB,EAAhC,6B,UC0DLE,GAvFqB,SAACxD,GAEjC,IAAMjC,EAAQ8E,YAAYrF,IACpBQ,EAAkB6E,YAAYT,IAC9B3E,EAAcoF,YAAYR,IAC1B3E,EAAWmF,YAAYV,IACvBjK,EAAS2K,YAAYL,IACrBtE,EAAsB2E,YAAYN,IAElCzL,EAAW2M,cACXC,EAAUC,cAGhBC,qBAAU,WACN,IAAMC,EAASC,SAAkBJ,EAAQhI,SAASqI,OAAOC,OAAO,IAC5DC,EAAaxG,EACbyG,EAAehM,EAKnB,OAHM2L,EAAOxF,OAAM4F,EAAaE,OAAON,EAAOxF,OACxCwF,EAAOjG,SAAQsG,EAAY,2BAAOA,GAAP,IAAqBvG,KAAMkG,EAAOlG,QAE3DkG,EAAOjG,QACX,IAAK,OACDsG,EAAY,2BAAOA,GAAP,IAAqBtG,OAAQ,OACzC,MACJ,IAAK,OACDsG,EAAY,2BAAOA,GAAP,IAAqBtG,QAAQ,IACzC,MACJ,IAAK,QACDsG,EAAY,2BAAOA,GAAP,IAAqBtG,QAAQ,IAMjD9G,EAASsH,EAAa6F,EAAYvG,EAAUwG,MAC7C,IAGHN,qBAAU,WAEN,IAAMQ,EAAyB,GACzBlM,EAAOyF,OAAMyG,EAAMzG,KAAOzF,EAAOyF,MACjB,OAAlBzF,EAAO0F,SAAiBwG,EAAMxG,OAASoF,OAAO9K,EAAO0F,SACrC,IAAhBH,IAAmB2G,EAAM/F,KAAO2E,OAAOvF,IAE3CiG,EAAQvJ,KAAK,CACTkK,SAAU,SACVN,OAAQD,aAAsBM,OAEnC,CAAClM,EAAQuF,IAEZ,IAQM6G,EAAa,SAACtP,GAChB8B,EP2Bc,SAAC9B,GACnB,8CAAO,WAAO8B,GAAP,SAAAC,EAAA,sEACGwH,EAAoBzH,EAAU9B,EAAQuI,EAASM,OAAO0G,KAAKhH,GAAWpH,GADzE,2CAAP,sDO5Ba0H,CAAO7I,KAEdwP,EAAe,SAACxP,GAClB8B,EP8BgB,SAAC9B,GACrB,8CAAO,WAAO8B,GAAP,SAAAC,EAAA,sEACGwH,EAAoBzH,EAAU9B,EAAQuI,EAASO,SAASyG,KAAKhH,GAAWpH,GAD3E,2CAAP,sDO/Ba2H,CAAS9I,KAEtB,OAAO,iCAEH,eAAC0N,GAAD,CAAiBW,gBAZG,SAACnL,GACrBpB,EAASsH,EAAa,EAAGV,EAAUxF,OAanC,eAAC,GAAD,CAAWuF,YAAaA,EAAa4C,cAlBnB,SAACoB,GACnB3K,EAASsH,EAAaqD,EAAY/D,EAAUxF,KAkBjCkI,gBAAiBpC,EAAiBN,SAAUA,IACvD,+BAEQK,EAAMlD,KAAI,SAAAyC,GAAC,OAAI,eAAC,GAAD,CAAMqE,KAAMrE,EACNY,oBAAqBA,EAErBJ,SAAU0G,EACV3G,OAAQyG,GAFHhH,EAAEtH,aCrF/ByO,GAA0C,SAACzE,GAEpD,IAAM/B,EAAa4E,YAAYP,IAE/B,OAAO,uCACH,8BAAKtC,EAAM0E,YACVzG,EAAa,eAACzJ,EAAA,EAAD,IAAe,KAC7B,eAAC,GAAD,Q,iDCiBFmQ,GAAiBC,aAAkD,CAAC1F,KAAM,SAAzD0F,EApBjB,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcnL,EAAuB,EAAvBA,MAAO6C,EAAgB,EAAhBA,WACzB,OACI,wBAAM2G,SAAU2B,EAAhB,UACKC,aAAqC,QAAS,QAAS,CAAC3Q,MAAW4Q,MACnED,aAAqC,WAAY,WAAY,CAAC3Q,MAAW4Q,KAAO,CAACzO,KAAM,aACvFwO,kBAAqCE,EAAW,aAAc,GAAID,KAAO,CAACzO,KAAM,YAAa,eAC7FiG,GAAc,sBAAK5H,IAAK4H,EAAYwF,IAAK,QACzCxF,GAAcuI,aAAqC,qBAAsB,UAAW,CAAC3Q,MAAW4Q,KAAO,IAEvGrL,GAAS,sBAAKyH,UAAW1M,KAAMwQ,iBAAtB,SACLvL,IAGL,+BACI,oDAgBHwL,GAAsB,SAAClF,GAEhC,IAAMzD,EAAasG,aAAY,SAAC9K,GAAD,OAAyBA,EAAMR,KAAKgF,cAC7DD,EAASuG,aAAY,SAAC9K,GAAD,OAAyBA,EAAMR,KAAK+E,UACzDxF,EAAW2M,cAKjB,OAAInH,EACO,eAAC,IAAD,CAAUsF,GAAI,aAGlB,iCACH,wCACA,eAAC+C,GAAD,CAAgBzB,SATH,SAACzN,GdND,IAACqG,EAAeC,EAAkBC,EAAqBC,EcOpEnF,GdPcgF,EcOCrG,EAASqG,MdPKC,EcOEtG,EAASsG,SdPOC,EcOGvG,EAASuG,WdPSC,EcOGxG,EAASwG,QdPnE,uCAAsF,WAAOnF,GAAP,iBAAAC,EAAA,sEACtF8E,EAAcC,EAAOC,EAAUC,EAAYC,GAD2C,QACnG5G,EADmG,QAE9F6B,aAAegE,IAAgBwB,QAEpC5F,EAAS0F,MAELnH,EAAK6B,aAAeiE,IAAyBgK,mBAC7CrO,EAAS6F,KAGT1G,EAAUZ,EAAKsC,SAASpD,OAAS,EAAIc,EAAKsC,SAAS,GAAK,aAC5Db,EAASW,YAAW,QAAS,CAACC,OAAQzB,MAX6D,2CAAtF,yDceuBsG,WAAYA,Q,kIC1D3C6I,GAAe,SAACrN,GACzB,OAAOA,EAAMR,KAAK+E,QAGT+I,GAAqB,SAACtN,GAC/B,OAAOA,EAAMR,KAAK8E,OCITiJ,GAAwD,SAACtF,GAGlE,IAAM1D,EAASuG,YAAYuC,IACrB/I,EAAQwG,YAAYwC,IACpBvO,EAAW2M,cAKjB,OAAO,+BACFnH,EACK,iCACE,eAAC,KAAD,CAAQ7H,MAAO,CAACC,gBAAiB,WAAY6Q,KAAM,eAACC,GAAA,EAAD,MAClDnJ,EAAM,eAAC,KAAD,CAAQkF,QARJ,WACnBzK,EhBgDc,uCAAiB,WAAOA,GAAP,SAAAC,EAAA,sEACd8E,IADc,OAGF,IAHE,OAGtBxG,KAAK6B,YACdJ,EAASX,EAAwB,KAAM,KAAM,MAAM,IAJpB,2CAAjB,wDgBzCC,wBAGX,eAAC,KAAD,UACI,eAAC,IAAD,CAAMyL,GAAI,SAAV,wBCHT6D,GAA0BC,KAA1BD,OAAQE,GAAkBD,KAAlBC,MAAOC,GAAWF,KAAXE,QAEhBC,GAAmBlD,IAAMmD,MAAK,kBAAM,iCACpCC,GAAmBpD,IAAMmD,MAAK,kBAAM,iCACpCE,GAAWrD,IAAMmD,MAAK,kBAAM,iCAO5BG,GAAmBnG,GAAa+F,IAChCK,GAAmBpG,GAAaiG,IAChCI,GAAoBrG,GAAakG,IAEjCI,G,4MAEFrO,MAAQ,CACJsO,WAAW,G,EAGfC,OAAS,WACL,EAAKC,SAAS,CACVF,WAAY,EAAKtO,MAAMsO,a,EAI/BG,wBAA0B,SAACvN,GACvBwN,MAAM,wB,uDAGV,WACIC,KAAK1G,MAAM2G,gBACXlL,OAAO1B,iBAAiB,qBAAsB2M,KAAKF,2B,kCAGvD,WACI/K,OAAO7B,oBAAoB,qBAAsB8M,KAAKF,2B,oBAG1D,WACI,OAAKE,KAAK1G,MAAMlD,YAKZ,gBAAC,KAAD,WACI,gBAAC6I,GAAD,CAAOiB,QAAS,KAAMC,aAAW,EAACR,UAAWK,KAAK3O,MAAMsO,UAAxD,UACI,sBAAKlF,UAAU,SACf,gBAAC,KAAD,CAAM2F,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,KAAvD,UACI,eAAC,KAAKC,KAAN,CAAmB1B,KAAM,eAACC,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAAS5D,GAAG,WAAZ,sBADW,KAGf,eAAC,KAAKqF,KAAN,CAAmB1B,KAAM,eAAC2B,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAAStF,GAAG,SAAZ,oBADW,KAGf,eAAC,KAAKqF,KAAN,CAAmB1B,KAAM,eAAC4B,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAASvF,GAAG,WAAZ,uBADW,KAGf,eAAC,KAAKqF,KAAN,CAAmB1B,KAAM,eAAC4B,GAAA,EAAD,IAAzB,SACI,eAAC,IAAD,CAASvF,GAAG,QAAZ,mBADW,KAGf,eAAC,KAAKqF,KAAN,CAAmB1B,KAAM,eAAC6B,GAAA,EAAD,IAAzB,kBAAe,KAGf,eAAC,KAAKH,KAAN,CAAmB1B,KAAM,eAAC8B,GAAA,EAAD,IAAzB,qBAAe,WAMvB,gBAAC,KAAD,CAAQlG,UAAU,cAAlB,UAEI,eAACsE,GAAD,CAAQtE,UAAU,yBAAyB1M,MAAO,CAAC6S,QAAS,GAA5D,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAKC,KAAM,GAAX,SACK5E,IAAM6E,cAAcd,KAAK3O,MAAMsO,UAAYoB,KAAqBC,KAAkB,CAC/EvG,UAAW,UACXI,QAASmF,KAAKJ,WAGtB,eAAC,KAAD,CAAKiB,KAAM,EAAX,SACI,eAAC,GAAD,WAKZ,eAAC3B,GAAD,CAASzE,UAAU,yBACV1M,MAAO,CACHkT,OAAQ,YACRL,QAAS,GACTM,UAAW,KAJxB,SAMI,gBAAC,IAAD,WACI,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,eAAC,IAAD,CAAUnG,GAAI,gBACnC,eAAC,IAAD,CAAOkG,KAAK,WACLC,OAAQ,kBAAM,eAAC9B,GAAD,OACrB,eAAC,IAAD,CAAO6B,KAAK,oBACLC,OAAQ,kBAAM,eAAC7B,GAAD,OACrB,eAAC,IAAD,CAAO4B,KAAK,SACLC,OAAQ,kBAAM,eAAC,GAAD,CAAWrD,UAAW,gBAC3C,eAAC,IAAD,CAAOoD,KAAK,SACLC,OAAQ,kBAAM,eAAC,GAAD,OACrB,eAAC,IAAD,CAAOD,KAAK,QACLC,OAAQ,kBAAM,eAAC5B,GAAD,OACrB,eAAC,IAAD,CAAO2B,KAAK,IACLC,OAAQ,kBAAM,+DAjE9B,eAACvT,EAAA,EAAD,Q,GA3BDwT,aAyGdC,GAAezI,YACf0I,IACAC,aANoB,SAACpQ,GAAD,MAA0B,CAC9C+E,YAAa/E,EAAMqH,IAAItC,eAKE,CAAC6J,chB1HD,kBAAM,SAAC7P,GAChC,IAAIsR,EAAUtR,EAAS0F,KAEvB5E,QAAQyQ,IAAI,CAACD,IACRjT,MAAK,WACF2B,EAASX,YgBmHFqJ,CAE4B4G,IAUhCkC,GARgB,WAC3B,OAAO,eAAC,IAAD,UACH,eAAC,IAAD,CAAU7I,MAAOA,GAAjB,SACI,eAACwI,GAAD,SCnJZM,IAASR,OAAO,eAAC,GAAD,IAAiBS,SAASC,eAAe,SrB2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzT,MAAK,SAAA0T,GACjCA,EAAaC,iB,wOsBzHbC,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASvP,EAAsB,EAAtBA,MAAQwP,EAAc,EAAdA,SACpEC,EAAWF,GAAWvP,EAC5B,OACI,sBAAKyH,UAAWE,IAAO+H,YAAc,KAAOD,EAAW9H,IAAO3H,MAAQ,IAAtE,UACI,8BACKwP,IAEJC,GAAY,+BAAOzP,QAKnB2P,EAAwC,SAACrJ,GAElD,IAAOsJ,EAA6BtJ,EAA7BsJ,MAAgBC,GAAavJ,EAAtBgJ,KAAd,YAAoChJ,EAApC,IACA,OAAO,cAAC+I,EAAD,2BAAiB/I,GAAjB,aAAwB,oDAAcsJ,GAAWC,QAG/CxE,EAAqC,SAAC/E,GAE/C,IAAOsJ,EAA6BtJ,EAA7BsJ,MAAgBC,GAAavJ,EAAtBgJ,KAAd,YAAoChJ,EAApC,IACA,OAAO,cAAC+I,EAAD,2BAAiB/I,GAAjB,aAAwB,iDAAWsJ,GAAWC,QAGlD,SAASzE,EAAyC0E,EAC7BnR,EACAoR,EACAC,GACwB,IAAxB1J,EAAuB,uDAAf,GAAI2J,EAAW,uDAAJ,GAC3C,OAAO,gCACH,cAAC,IAAD,aAAOH,YAAaA,EAAanR,KAAMA,EAChC4K,SAAUwG,EACVC,UAAWA,GACP1J,IAJR,IAKC2J,O,mBC3CZ9U,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,2C","file":"static/js/main.969a5ccc.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined\n\n    return \"Field is required\"\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n","export default __webpack_public_path__ + \"static/media/preloader.ea356991.svg\";","import React from 'react'\nimport preloader from \"../../../assets/images/preloader.svg\"\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\",\"selectedPage\":\"Paginator_selectedPage__3SIki\"};","import {PhotosType, ProfileType} from '../types/types'\nimport {instance, APIResponseType} from './api'\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData()\n        formData.append(\"image\", photoFile)\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\n    }\n}\n","import {FormAction, stopSubmit} from \"redux-form\"\nimport {PhotosType, PostType, ProfileType} from '../types/types'\nimport {profileAPI} from '../api/profile-api'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch (error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {InferActionsTypes} from './redux-store'\n\ntype DialogType = {\n    id: number\n    name: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrew'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Viktor'},\n        {id: 6, name: 'Valera'}\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'How is your it-kamasutra?'},\n        {id: 3, message: 'Yo'},\n        {id: 4, message: 'Yo'},\n        {id: 5, message: 'Yo'}\n    ] as Array<MessageType>\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/SEND_MESSAGE':\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\n}\n\nexport default dialogsReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","\nconst subscribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersStatus('pending')\n    setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n    const newMessage = JSON.parse(e.data)\n    subscribers['messages-received'].forEach(s => s(newMessage))\n}\n\nconst openHandler = () => {\n    notifySubscribersStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersStatus('error')\n    console.error('restart page')\n}\n\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\n\nconst notifySubscribersStatus = (status: StatusType) => {\n    subscribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subscribers['messages-received'] = []\n        subscribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName].push(callback)\n        return () => {\n            // @ts-ignore\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {FormAction} from 'redux-form/lib/actions'\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\nimport {Dispatch} from \"redux\";\nimport {v1} from 'uuid'\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/chat/MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1() }))]\n                    .filter((m,index,array) => index >= array.length - 100)\n            }\n        case 'SN/chat/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: 'SN/chat/MESSAGES_RECEIVED', payload: {messages}\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\n    } as const)\n}\n\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst mewMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', mewMessageHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received',mewMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\nexport default chatReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","import axios from \"axios\"\nimport {UserType} from '../types/types'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"cb23f35d-ab67-4a69-88b7-8930661a2897\"\n    }\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\"\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\n","import {instance} from './api'\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\n    }\n}\n","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\"\nimport {stopSubmit} from \"redux-form\"\nimport {authAPI} from '../api/auth-api'\nimport {securityAPI} from '../api/security-api'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {FormAction} from 'redux-form/lib/actions'\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl())\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\"\n        dispatch(stopSubmit(\"login\", {_error: message}))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {getAuthUserData} from \"./auth-reducer\"\nimport {InferActionsTypes} from './redux-store'\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData())\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess())\n        })\n}\n\n\nexport default appReducer\n","let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state\n}\n\nexport default sidebarReducer\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u\n    })\n}\n","import {GetItemsType, instance, APIResponseType} from './api'\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType ): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term,filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode === 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\nimport profileReducer from \"./profile-reducer\"\nimport dialogsReducer from \"./dialogs-reducer\"\nimport sidebarReducer from \"./sidebar-reducer\"\nimport usersReducer from \"./users-reducer\"\nimport authReducer from \"./auth-reducer\"\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./app-reducer\"\nimport chatReducer from \"./chat-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer\n})\n\ntype RootReducerType = typeof rootReducer // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store\n","import React from \"react\"\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<div>loading...</div>} >\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    }\n}\n","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({\n                                          totalItemsCount, pageSize,\n                                          currentPage = 1,\n                                          onPageChanged = x => x,\n                                          portionSize = 10\n                                      }) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages: Array<number> = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    let rightPortionPageNumber = portionNumber * portionSize\n\n\n    return <div className={cn(styles.paginator)}>\n        {portionNumber > 1 &&\n        <button onClick={() => {\n            setPortionNumber(portionNumber - 1)\n        }}>PREV</button>}\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map((p) => {\n                return <span className={cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber)}\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p)\n                             }}>{p}</span>\n            })}\n        {portionCount > portionNumber &&\n        <button onClick={() => {\n            setPortionNumber(portionNumber + 1)\n        }}>NEXT</button>}\n    </div>\n}\n\nexport default Paginator\n","import React from 'react'\nimport styles from \"./users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport {NavLink} from \"react-router-dom\"\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n\n\n    return (\n        <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} alt={''}\n                             className={styles.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{\"user.location.country\"}</div>\n                        <div>{\"user.location.city\"}</div>\n                    </span>\n                </span>\n        </div>)\n}\n\nexport default User\n","import {createSelector} from \"reselect\"\nimport {AppStateType} from \"./redux-store\"\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector,\n    (users) => {\n        return users.filter(u => true)\n    })\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/users-reducer'\nimport {useSelector} from \"react-redux\";\nimport {getUsersFilter} from \"../../redux/users-selectors\";\n\nconst usersSearchFormValidate = () => {\n    return {}\n}\n\ntype FriendFormType = 'true' | 'false' | 'null';\ntype FormType = {\n    term: string\n    friend: FriendFormType\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n    const filter = useSelector(getUsersFilter)\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true'    /*? true : false*/\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term:filter.term, friend: String(filter.friend)as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {FilterType, follow, requestUsers, unfollow} from '../../redux/users-reducer'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from \"../../redux/users-selectors\"\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from \"querystring\";\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string, page?: string, friend?: string };\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    //useEffect запрашиваем пользователей\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n        if (!!parsed.friend) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch (parsed.friend) {\n            case 'null':\n                actualFilter = {...actualFilter, friend: null}\n                break\n            case 'true':\n                actualFilter = {...actualFilter, friend: true}\n                break\n            case 'false':\n                actualFilter = {...actualFilter, friend: false}\n                break\n        }\n        //alternative\n        // if (!parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null'? null:parsed.friend === 'true'}\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    // useEffect для синхронизации адрессной строки\n    useEffect(() => {\n\n        const query: QueryParamsType = {}\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    const followUser = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const unfollowUser = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollowUser}\n                                     follow={followUser}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n\n\nexport default Users\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Users from './Users'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/users-selectors'\n\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users/>\n    </>\n}\n\n\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from \"redux-form\"\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\"\nimport {required} from \"../../utils/validators/validators\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {login} from \"../../redux/auth-reducer\"\nimport {Redirect} from \"react-router-dom\"\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\n            {captchaUrl && <img src={captchaUrl} alt={'img'}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {})}\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = (props) => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    if (isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n\n","import {AppStateType} from \"./redux-store\"\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentLogin = (state: AppStateType) => {\n    return state.auth.login\n}","import React from 'react'\nimport {Link} from \"react-router-dom\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Avatar, Button} from \"antd\";\nimport {UserOutlined} from \"@ant-design/icons\";\nimport {selectCurrentLogin, selectIsAuth} from \"../../redux/auth-selectors\";\nimport {logout} from '../../redux/auth-reducer';\n\nexport type MapPropsType = {}\nexport type DispatchPropsType = {}\n\nexport const AppHeader: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentLogin)\n    const dispatch = useDispatch()\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    return <div>\n        {isAuth\n            ? <div>\n                <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                {login}<Button onClick={logoutCallback}>Log out</Button>\n            </div>\n            :\n            <Button>\n                <Link to={'/login'}>Login</Link>\n            </Button>\n        }\n    </div>\n}\n\n","import React, {Component} from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport {BrowserRouter, NavLink, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\nimport {connect, Provider} from \"react-redux\"\nimport {compose} from \"redux\"\nimport {initializeApp} from \"./redux/app-reducer\"\nimport Preloader from \"./components/common/Preloader/Preloader\"\nimport store, {AppStateType} from \"./redux/redux-store\"\nimport {withSuspense} from \"./hoc/withSuspense\"\nimport {UsersPage} from \"./components/Users/UsersContainer\"\nimport {LoginPage} from \"./components/Login/Login\";\n\nimport {Col, Layout, Menu, Row} from 'antd';\nimport {\n    CustomerServiceOutlined,\n    MenuFoldOutlined,\n    MenuUnfoldOutlined,\n    SettingOutlined,\n    TeamOutlined,\n    UserOutlined,\n    WechatOutlined\n} from '@ant-design/icons'\nimport {AppHeader} from \"./components/Header/Header\";\n\n//ant design const\nconst {Header, Sider, Content} = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./pages/chat/ChatPage'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n//обертка для react.lazy\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n    state = {\n        collapsed: false,\n    }\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        })\n    }\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(\"Some error occurred\")\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <Layout>\n                <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                        <Menu.Item key=\"1\" icon={<UserOutlined/>}>\n                            <NavLink to=\"/profile\">Profile</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\" icon={<TeamOutlined/>}>\n                            <NavLink to=\"/users\">Users</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\" icon={<WechatOutlined/>}>\n                            <NavLink to=\"/dialogs\">Messages</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\" icon={<WechatOutlined/>}>\n                            <NavLink to=\"/chat\">Chat</NavLink>\n                        </Menu.Item>\n                        <Menu.Item key=\"5\" icon={<CustomerServiceOutlined/>}>\n                            Music\n                        </Menu.Item>\n                        <Menu.Item key=\"6\" icon={<SettingOutlined/>}>\n                            Settings\n                        </Menu.Item>\n                    </Menu>\n\n                </Sider>\n                <Layout className=\"site-layout\">\n\n                    <Header className=\"site-layout-background\" style={{padding: 0}}>\n                        <Row>\n                            <Col span={18}>\n                                {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n                                    className: 'trigger',\n                                    onClick: this.toggle,\n                                })}\n                            </Col>\n                            <Col span={6}>\n                                <AppHeader/>\n                            </Col>\n                        </Row>\n                    </Header>\n\n                    <Content className=\"site-layout-background\"\n                             style={{\n                                 margin: '24px 16px',\n                                 padding: 24,\n                                 minHeight: 480,\n                             }}>\n                        <Switch>\n                            <Route exact path='/'\n                                   render={() => <Redirect to={\"/profile\"}/>}/>\n                            <Route path='/dialogs'\n                                   render={() => <SuspendedDialogs/>}/>\n                            <Route path='/profile/:userId?'\n                                   render={() => <SuspendedProfile/>}/>\n                            <Route path='/users'\n                                   render={() => <UsersPage pageTitle={\"Samurais\"}/>}/>\n                            <Route path='/login'\n                                   render={() => <LoginPage/>}/>\n                            <Route path='/chat'\n                                   render={() => <SuspendedChatPage/>}/>\n                            <Route path='*'\n                                   render={() => <div>404 NOT FOUND</div>}/>\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp: React.FC = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport SamuraiJSApp from \"./App\"\n\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'))\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};"],"sourceRoot":""}